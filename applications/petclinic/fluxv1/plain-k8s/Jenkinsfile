#!groovy

// "Constants"
String getApplication() {"spring-petclinic-plain" }
String getScmManagerCredentials() { 'scmm-user' }
String getConfigRepositoryUrl() { "http://scmm-scm-manager/scm/repo/fluxv1/gitops" }
String getConfigRepositoryPRUrl() { 'http://scmm-scm-manager/scm/api/v2/pull-requests/fluxv1/gitops' }
// The docker daemon cant use the k8s service name, because it is not running inside the cluster
String getDockerRegistryBaseUrl() { "localhost:30000" }
String getCesBuildLibRepo() { 'https://github.com/cloudogu/ces-build-lib/' }
String getCesBuildLibVersion() { '1.44.3' }
String getGitOpsBuildLibRepo() { 'http://scmm-scm-manager/scm/repo/common/gitops-build-lib' }
String getGitOpsBuildLibVersion() { '0.0.2' }
String getMainBranch() { 'main' } 
String getK8sVersion() { '1.18.1 '} #
String getConfigDir() { '.config'} #

// images, helm also offers kubeval
String getHelmImage() { 'ghcr.io/cloudogu/helm:3.4.1-1'}
String getYamlLintImage() { 'cytopia/yamllint:1.25' }

cesBuildLib = library(identifier: "ces-build-lib@${cesBuildLibVersion}",
        retriever: modernSCM([$class: 'GitSCMSource', remote: cesBuildLibRepo])
).com.cloudogu.ces.cesbuildlib

gitOpsBuildLib = library(identifier: "gitops-build-lib@${gitOpsBuildLibVersion}",
    retriever: modernSCM([$class: 'GitSCMSource', remote: gitOpsBuildLibRepo])
).com.cloudogu.gitops.gitopsbuildlib

properties([
        // Don't run concurrent builds, because the ITs use the same port causing random failures on concurrent builds.
        disableConcurrentBuilds()
])

node {

    mvn = cesBuildLib.MavenWrapper.new(this)

    gitops = gitOpsBuildLib.GitOps.new(this, application, cesBuildLibRepo, cesBuildLibVersion, scmManagerCredentials)

    catchError {

        stage('Checkout') {
            checkout scm
        }

        stage('Build') {
            mvn 'clean package -DskipTests'

            archiveArtifacts artifacts: '**/target/*.jar'
        }

        stage('Test') {
            mvn "test -Dmaven.test.failure.ignore=true"
        }

        String imageName = ""
        stage('Docker') {
            String imageTag = gitops.createImageTag()
            imageName = "${dockerRegistryBaseUrl}/${application}:${imageTag}"
            mvn "spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${imageName}"

            if (isBuildSuccessful()) {
                def docker = cesBuildLib.Docker.new(this)
                docker.withRegistry("http://${dockerRegistryBaseUrl}") {
                    def image = docker.image(imageName)
                    image.push()
                }
            } else {
                echo 'Skipping docker push, because build not successful'
            }
        }

        stage('Deploy') {
            if (isBuildSuccessful() && env.BRANCH_NAME in [mainBranch]) {

                def gitopsConfig = [
                        scmmCredentialsId: scmManagerCredentials,
                        scmmConfigRepoUrl: configRepositoryUrl,
                        scmmPullRequestUrl: configRepositoryPRUrl,
                        mainBranch: mainBranch,
                        updateImages: [
                                [ deploymentFilename: "deployment.yaml",
                                  containerName: application,
                                  imageName: imageName ]
                        ],
                        // stages consists of [ $branchName: [ $deployConfig ]]
                        // where $deployConfig is an array which consists of $deployDirectly
                        //
                        // deployDirectly: true  -> deploys directly
                        // deployDirectly: false -> creates a PR (default)
                        stages: [
                                staging: [ deployDirectly: true ],
                                production: [ deployDirectly: false ],
                                qa: [ ]
                        ]
                ]

                String pushedChanges = gitops.pushToConfigRepo(gitopsConfig)
                currentBuild.description = gitops.createBuildDescription(pushedChanges, imageName)
            } else {
                echo 'Skipping deploy, because build not successful or not on main branch'
            }
        }
    }

    // Archive Unit and integration test results, if any
    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml'
}

def cesBuildLib
def gitOpsBuildLib
