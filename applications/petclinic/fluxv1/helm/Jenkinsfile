#!groovy

String getApplication() { "spring-petclinic-helm" }
String getScmManagerCredentials() { 'scmm-user' }
String getConfigRepositoryUrl() { "http://scmm-scm-manager/scm/repo/fluxv1/gitops" }
String getConfigRepositoryPRBaseUrl() { 'http://scmm-scm-manager/scm' }
String getConfigRepositoryPRRepo() { 'fluxv1/gitops' }
// The docker daemon cant use the k8s service name, because it is not running inside the cluster
String getDockerRegistryBaseUrl() { "localhost:30000" }
String getCesBuildLibRepo() { 'https://github.com/cloudogu/ces-build-lib/' } // TODO change back to scmm repo
String getCesBuildLibVersion() { 'bugfix/location_for_prId' }
String getGitOpsBuildLibRepo() { 'https://github.com/cloudogu/gitops-build-lib' } // TODO change to scmm repo?
String getGitOpsBuildLibVersion() { 'feature/helm-repo-type' }
String getHelmChartRepository() { 'http://scmm-scm-manager.default.svc.cluster.local/scm/repo/common/spring-boot-helm-chart' }
String getHelmChartName() { "springboot" }
String getHelmChartVersion() { "1.0.0" }
String getMainBranch() { 'main' }

cesBuildLib = library(identifier: "ces-build-lib@${cesBuildLibVersion}",
        retriever: modernSCM([$class: 'GitSCMSource', remote: cesBuildLibRepo])
).com.cloudogu.ces.cesbuildlib

gitOpsBuildLib = library(identifier: "gitops-build-lib@${gitOpsBuildLibVersion}",
    retriever: modernSCM([$class: 'GitSCMSource', remote: gitOpsBuildLibRepo])
).com.cloudogu.gitops.gitopsbuildlib

properties([
        // Don't run concurrent builds, because the ITs use the same port causing random failures on concurrent builds.
        disableConcurrentBuilds()
])

node {
    mvn = cesBuildLib.MavenWrapper.new(this)

    catchError {

        stage('Checkout') {
            checkout scm
        }

        stage('Build') {
            mvn 'clean package -DskipTests -Dcheckstyle.skip'
            archiveArtifacts artifacts: '**/target/*.jar'
        }

        stage('Test') {
            mvn "test -Dmaven.test.failure.ignore=true -Dcheckstyle.skip"
        }

        String imageName = ""
        stage('Docker') {
            String imageTag = createImageTag()
            imageName = "${dockerRegistryBaseUrl}/${application}:${imageTag}"
            mvn "spring-boot:build-image -DskipTests -Dcheckstyle.skip -Dspring-boot.build-image.imageName=${imageName}"

            if (isBuildSuccessful()) {
                def docker = cesBuildLib.Docker.new(this)
                docker.withRegistry("http://${dockerRegistryBaseUrl}") {
                    def image = docker.image(imageName)
                    image.push()
                }
            } else {
                echo 'Skipping docker push, because build not successful'
            }
        }

        stage('Deploy') {
            if (isBuildSuccessful() && env.BRANCH_NAME in [mainBranch]) {

                def gitopsConfig = [
                        scmmCredentialsId : scmManagerCredentials,
                        scmmConfigRepoUrl : configRepositoryUrl,
                        scmmPullRequestBaseUrl: configRepositoryPRBaseUrl,
                        scmmPullRequestRepo: configRepositoryPRRepo,
                        cesBuildLibRepo: cesBuildLibRepo,
                        cesBuildLibVersion: cesBuildLibVersion,
                        application: application,
                        mainBranch: mainBranch,
                        deployments: [
                            sourcePath: 'k8s',
                            helm : [
                                repoType : 'GIT',
                                credentialsId : 'creds',
                                repoUrl  : helmChartRepository,
                                chartName: helmChartName,
                                version  : helmChartVersion,
                                extraResources: ['configMap.yaml, secrets'], // files or folders relative to deployments.path.${stage} Default empty array. 
                                updateValues  : [[fieldPath: "image.name", newValue: imageName]]
                            ]
                        ],
                        // stages consists of [ $branchName: [ $deployConfig ]]
                        // where $deployConfig is an array which consists of $deployDirectly
                        //
                        // deployDirectly: true  -> deploys directly
                        // deployDirectly: false -> creates a PR (default)
                        stages: [
                                staging: [ deployDirectly: true ],
                                production: [ deployDirectly: false ],
                        ]
                ]

                deployViaGitops(gitopsConfig)
            } else {
                echo 'Skipping deploy, because build not successful or not on main branch'
            }
        }
    }

    // Archive Unit and integration test results, if any
    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml'
}


String createImageTag() {
    def git = cesBuildLib.Git.new(this)
    String branch = git.simpleBranchName
    String branchSuffix = ""

    if (!"develop".equals(branch)) {
        branchSuffix = "-${branch}"
    }

    return "${new Date().format('yyyyMMddHHmm')}-${git.commitHashShort}${branchSuffix}"
}

def cesBuildLib
def gitOpsBuildLib