#!groovy

// "Constants"
String getApplication() {"spring-petclinic-plain" }
String getScmManagerCredentials() { 'scmm-user' }
String getConfigRepositoryPRBaseUrl() { "${env.SCMM_URL}" }
String getConfigRepositoryPRRepo() { "argocd/gitops" }
// The docker daemon cant use the k8s service name, because it is not running inside the cluster
String getDockerRegistryBaseUrl() { "${env.REGISTRY_URL}" }
String getDockerRegistryPath() { "${env.REGISTRY_PATH}" }
String getDockerRegistryCredentials() { 'registry-user' }
String getCesBuildLibVersion() { '1.46.1' }
String getCesBuildLibRepo() { "${env.SCMM_URL}/repo/common/ces-build-lib/" }
String getGitOpsBuildLibRepo() { "${env.SCMM_URL}/repo/common/gitops-build-lib" }
String getGitOpsBuildLibVersion() { '0.0.12' }
String getMainBranch() { 'main' }

cesBuildLib = library(identifier: "ces-build-lib@${cesBuildLibVersion}",
        retriever: modernSCM([$class: 'GitSCMSource', remote: cesBuildLibRepo, credentialsId: scmManagerCredentials])
).com.cloudogu.ces.cesbuildlib

gitOpsBuildLib = library(identifier: "gitops-build-lib@${gitOpsBuildLibVersion}",
        retriever: modernSCM([$class: 'GitSCMSource', remote: gitOpsBuildLibRepo, credentialsId: scmManagerCredentials])
).com.cloudogu.gitops.gitopsbuildlib

properties([
        // Don't run concurrent builds, because the ITs use the same port causing random failures on concurrent builds.
        disableConcurrentBuilds()
])

node {

    mvn = cesBuildLib.MavenWrapper.new(this)

    catchError {

        stage('Checkout') {
            checkout scm
        }

        stage('Build') {
            mvn 'clean package -DskipTests'
            archiveArtifacts artifacts: '**/target/*.jar'
        }

        stage('Test') {
            mvn "test -Dmaven.test.failure.ignore=true"
        }

        String imageName = ""
        stage('Docker') {
            String imageTag = createImageTag()
            String pathPrefix = !dockerRegistryPath?.trim() ? "" : "${dockerRegistryPath}/"
            imageName = "${dockerRegistryBaseUrl}/${pathPrefix}${application}:${imageTag}"
            mvn "spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${imageName}"

            if (isBuildSuccessful()) {
                def docker = cesBuildLib.Docker.new(this)
                docker.withRegistry("http://${dockerRegistryBaseUrl}", dockerRegistryCredentials) {
                    def image = docker.image(imageName)
                    image.push()
                }
            } else {
                echo 'Skipping docker push, because build not successful'
            }
        }

        stage('Deploy') {
            if (isBuildSuccessful() && env.BRANCH_NAME in [mainBranch]) {

                def gitopsConfig = [
                        scm                     : [
                                provider     : 'SCMManager',
                                credentialsId: scmManagerCredentials,
                                baseUrl      : configRepositoryPRBaseUrl,
                                repositoryUrl   : configRepositoryPRRepo,
                        ],
                        cesBuildLibRepo: cesBuildLibRepo,
                        cesBuildLibVersion: cesBuildLibVersion,
                        cesBuildLibCredentialsId: scmManagerCredentials,
                        application: application,
                        mainBranch: mainBranch,
                        gitopsTool: 'ARGO_CD',
                        deployments: [
                            sourcePath: 'k8s',
                            plain: [
                                updateImages: [
                                [ filename: "deployment.yaml",
                                containerName: application,
                                imageName: imageName ]
                               ]
                            ]
                        ],
                        stages: [
                                staging: [
                                        namespace: 'argocd-staging',
                                        deployDirectly: true ],
                                production: [
                                        namespace: 'argocd-production',
                                        deployDirectly: false ],
                        ]
                ]

                deployViaGitops(gitopsConfig)
            } else {
                echo 'Skipping deploy, because build not successful or not on main branch'
            }
        }
    }

    // Archive Unit and integration test results, if any
    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml'
}

String createImageTag() {
    def git = cesBuildLib.Git.new(this)
    String branch = git.simpleBranchName
    String branchSuffix = ""

    if (!"develop".equals(branch)) {
        branchSuffix = "-${branch}"
    }

    return "${new Date().format('yyyyMMddHHmm')}-${git.commitHashShort}${branchSuffix}"
}

def cesBuildLib
def gitOpsBuildLib