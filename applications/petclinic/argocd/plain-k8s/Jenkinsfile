#!groovy

// "Constants"
String getApplication() { 'spring-petclinic-plain' }
String getDockerRegistryBaseUrl() { env.REGISTRY_URL }
String getDockerRegistryPath() { env.REGISTRY_PATH }
String getDockerRegistryCredentials() { 'registry-user' }

@Library(['github.com/cloudogu/ces-build-lib@1.48.0', 'github.com/cloudogu/gitops-build-lib@0.1.3']) _
import com.cloudogu.ces.cesbuildlib.*
import com.cloudogu.ces.gitopsbuildlib.*

properties([
        // Don't run concurrent builds, because the ITs use the same port causing random failures on concurrent builds.
        disableConcurrentBuilds()
])

node {

    mvn = new MavenWrapper(this)

    catchError {

        stage('Checkout') {
            checkout scm
        }

        stage('Build') {
            // Build and tests skipped for faster demo and exercise purposes
            //mvn 'clean package -DskipTests'
            archiveArtifacts artifacts: '**/target/*.jar'
        }

        stage('Test') {
            // Build and tests skipped for faster demo and exercise purposes
            //mvn "test -Dmaven.test.failure.ignore=true"
        }

        String imageName = ""
        stage('Docker') {
            String imageTag = createImageTag()
            String pathPrefix = !dockerRegistryPath?.trim() ? "" : "${dockerRegistryPath}/"
            imageName = "${dockerRegistryBaseUrl}/${pathPrefix}${application}:${imageTag}"
            mvn "spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=${imageName} " +
                    // Pin builder image for reproducible builds. Update here to get newer JDK minor versions.
                    "-Dspring-boot.build-image.builder=paketobuildpacks/builder:0.1.185-base "

            if (isBuildSuccessful()) {
                def docker = new Docker(this)
                docker.withRegistry("http://${dockerRegistryBaseUrl}", dockerRegistryCredentials) {
                    def image = docker.image(imageName)
                    image.push()
                }
            } else {
                echo 'Skipping docker push, because build not successful'
            }
        }

        stage('Deploy') {
            if (isBuildSuccessful() && env.BRANCH_NAME in [mainBranch]) {

                def gitopsConfig = [
                        scm: [
                                provider     : 'SCMManager',
                                credentialsId: 'scmm-user',
                                baseUrl      : env.SCMM_URL,
                                repositoryUrl: 'argocd/gitops',
                        ],
                        application: application,
                        gitopsTool: 'ARGO',
                        deployments: [
                                sourcePath: 'k8s',
                                plain: [
                                        updateImages: [
                                                [ filename: "deployment.yaml",
                                                  containerName: application,
                                                  imageName: imageName ]
                                        ]
                                ]
                        ],
                        fileConfigmaps: [
                                // Showcase for gitops-build-lib: Convert file into a config map
                                [
                                        name : 'messages',
                                        sourceFilePath : '../src/main/resources/messages/messages.properties',
                                        stage: ['staging', 'production']
                                ]
                        ],
                        stages: [
                                staging: [
                                        namespace: 'argocd-staging',
                                        deployDirectly: true ],
                                production: [
                                        namespace: 'argocd-production',
                                        deployDirectly: false ],
                        ]
                ]

                deployViaGitops(gitopsConfig)
            } else {
                echo 'Skipping deploy, because build not successful or not on main branch'
            }
        }
    }

    // Archive Unit and integration test results, if any
    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/TEST-*.xml,**/target/surefire-reports/TEST-*.xml'
}

String createImageTag() {
    def git = new Git(this)
    String branch = git.simpleBranchName
    String branchSuffix = ""

    if (!"develop".equals(branch)) {
        branchSuffix = "-${branch}"
    }

    return "${new Date().format('yyyyMMddHHmm')}-${git.commitHashShort}${branchSuffix}"
}

def cesBuildLib
def gitOpsBuildLib
