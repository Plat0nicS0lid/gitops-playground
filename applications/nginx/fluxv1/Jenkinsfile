#!groovy

String getApplication() { "nginx" }
String getScmManagerCredentials() { 'scmm-user' }
String getConfigRepositoryUrl() { "http://scmm-scm-manager/scm/repo/fluxv1/gitops" }
String getConfigRepositoryPRBaseUrl() { 'http://scmm-scm-manager/scm' }
String getConfigRepositoryPRRepo() { 'fluxv1/gitops' }
String getCesBuildLibRepo() { 'https://github.com/cloudogu/ces-build-lib/' } // TODO change back to scmm repo
String getCesBuildLibVersion() { 'bugfix/location_for_prId' }
String getGitOpsBuildLibRepo() { 'https://github.com/cloudogu/gitops-build-lib' } // TODO change to scmm repo?
String getGitOpsBuildLibVersion() { 'feature/helm-repo-type' }
String getHelmChartRepository() { "https://charts.bitnami.com/bitnami" }
String getHelmChartName() { "nginx" }
String getHelmChartVersion() { "8.0.0" }
String getMainBranch() { 'main' }

cesBuildLib = library(identifier: "ces-build-lib@${cesBuildLibVersion}",
        retriever: modernSCM([$class: 'GitSCMSource', remote: cesBuildLibRepo])
).com.cloudogu.ces.cesbuildlib

gitOpsBuildLib = library(identifier: "gitops-build-lib@${gitOpsBuildLibVersion}",
    retriever: modernSCM([$class: 'GitSCMSource', remote: gitOpsBuildLibRepo])
).com.cloudogu.gitops.gitopsbuildlib

properties([
        // Keep only the last 10 build to preserve space
        disableConcurrentBuilds()
])

node('docker') {



    def git = cesBuildLib.Git.new(this)

    // In this chart we don't need to set properties in HelmRelease's "values" field. 
    // We leave this mechanism in place as an example.

    // helmValuesFromFile = []

    // fileConfigmaps = [
    //         [name : "index",
    //          file : "../index.html",
    //          stage: ["staging", "production"]
    //         ]
    // ]

    timeout(activity: true, time: 30, unit: 'MINUTES') {
        
        catchError {
            
            stage('Checkout') {
                checkout scm
                git.clean('')
            }

            stage('Deploy') {
                if (env.BRANCH_NAME in [mainBranch]) {
                    def gitopsConfig = [
                        scmmCredentialsId : scmManagerCredentials,
                        scmmConfigRepoUrl : configRepositoryUrl,
                        scmmPullRequestBaseUrl: configRepositoryPRBaseUrl,
                        scmmPullRequestRepo: configRepositoryPRRepo,
                        cesBuildLibRepo: cesBuildLibRepo,
                        cesBuildLibVersion: cesBuildLibVersion,
                        application: application,
                        mainBranch: mainBranch,
                        deployments: [
                            sourcePath: 'k8s',
                            helm : [
                                repoType : 'HELM',
                                credentialsId : 'creds',
                                repoUrl  : helmChartRepository,
                                chartName: helmChartName,
                                version  : helmChartVersion,
                            ]
                        ],
                        // stages consists of [ $branchName: [ $deployConfig ]]
                        // where $deployConfig is an array which consists of $deployDirectly
                        //
                        // deployDirectly: true  -> deploys directly
                        // deployDirectly: false -> creates a PR (default)
                        stages: [
                                staging: [ deployDirectly: true ],
                                production: [ deployDirectly: false ],
                        ],
                        helmValuesFromFile: [],
                        fileConfigmaps: [
                                [name : "index",
                                file : "../index.html",
                                stage: ["staging", "production"]
                                ]
                        ]
                    ]

                deployViaGitops(gitopsConfig)
                } else {
                    // setBuildDescription 'No push to gitOps repo, because neither on develop branch nor "forceDeployStaging" param set'
                    echo 'Skipping deploy, because build not successful or not on main branch'

                }
            }
        }
    }
}

def cesBuildLib
def gitOpsBuildLib