# TODO convert this to k3s helm CR

# For updating, delete pvc jenkins-docker-client
dockerClientVersion: 19.03.9

master:

  # Set the ID of the docker group on your host here.
  # getent group docker | awk -F: '{ print $3}'
  # TODO this requires configuring by the user. Use runAsUser instead? With access to the docker socket security is void anyway.
  fsGroup: 998
  # Alternative: Running as root is not a good practice, but we could use it as a workaround here, because root can 
  # access the docker socket
  #runAsUser: 0

  # Use deterministic version and not "lts", which is pretty much the same as "latest".
  # Note: When updating, check if PATH of image still matches the one listed in "containerEnv"
  tag: 2.249.2-lts-alpine

  # Don't install plugins on every pod start
  #initializeOnce: true
  
  # Allow builds on master in order to facilitate an agent with docker CLI 
  numExecutors: 2
  
  serviceType: NodePort
  nodePort: 9090
  
  JCasC:
    configScripts:
      # TODO use SCMM user secret keys for username and password
      scmm-credentials: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - usernamePassword:
                  id: "scmm-user"
                  username: "${jenkins-admin-user}"
                  password: "${jenkins-admin-password}"
                  description: "Credentials for accessing SCM-Manager"
                  scope: GLOBAL
      # Set some more details on master agent
      # Add /docker to the PATH. Using "PATH=:/docker:${PATH}" is not working here, so copy PATH from container :-/
      # That is, this might have to be updated with newer version of the image
      master-agent: |
        jenkins:
          labelString: "docker"
          nodeProperties:
            - envVars:
                env:
                - key: "PATH"
                  value: "/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/docker"
  
  admin:
    # Use reproducible admin password from secret. Change there, if necessary.
    existingSecret: jenkins-credentials

  containerEnv:
    - name: SECRETS
      # The files in this folders can be used as ${variable} in CasC credentials
      # Default /run/secrets results in "read-only file system"
      value: /secrets/jenkins

  customInitContainers:
    # Download docker client
    - name: download-docker-client
      image: alpine:3.12.0
      imagePullPolicy: "{{ .Values.master.imagePullPolicy }}"
      command: ["/bin/sh", "-c"]
      args:
        - if [ -f /docker/docker ]; then echo 'Docker already installed'; exit 0; fi;
          cd /tmp;
          wget -qc https://download.docker.com/linux/static/stable/x86_64/docker-{{.Values.dockerClientVersion}} -O - | tar -xz;
          mv /tmp/docker/docker /docker/docker;
      volumeMounts:
        - name: docker-client
          mountPath: /docker

persistence:
  volumes:
    - name: docker-client
      # Persist, so the client does not have to be downloaded on each start
      persistentVolumeClaim:
        claimName: jenkins-docker-client
    - name: docker-sock # For this demo, allow jenkins master to access docker client 
      hostPath:
        path: /var/run/docker.sock
    - name: scmm-user
      secret:
        # TODO use SCMM user secret here
        secretName: jenkins-credentials
  mounts:
    - name: scmm-user
      # Use k8s secret as jenkins credentials.
      # https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#kubernetes-secrets
      mountPath: /secrets/jenkins
      readOnly: true
    - name: docker-client
      mountPath: /docker
      readOnly: true
    - name: docker-sock
      mountPath: "/var/run/docker.sock"
      readOnly: true
  