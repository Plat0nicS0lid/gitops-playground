master:
  # to prevent the jenkins-ui-test pod being created
  testEnabled: false
  # Use deterministic version and not "lts", which is pretty much the same as "latest".
  # Note: When updating, check if PATH of image still matches the one listed in "containerEnv"
  tag: 2.249.3-lts-jdk11

  serviceType: NodePort
  nodePort: 9090

  additionalPlugins:
    - docker-workflow:1.25
    - docker-plugin:1.2.1
    - job-dsl:1.77
    - pipeline-utility-steps:2.6.1
    - junit:1.44
    - scm-manager:1.5.0

  # This would be great to not install every plugin again on startup.
  # BUT: This also leads to CASC being ignored.
  # initializeOnce: true

  # Don't use master for builds
  numExecutors: 0

  JCasC:
    configScripts:
      # TODO use SCMM user secret keys for username and password
      scmm-credentials: |
        credentials:
          system:
            domainCredentials:
            - credentials:
              - usernamePassword:
                  id: "scmm-user"
                  username: "${USERNAME}"
                  password: "${PASSWORD}"
                  description: "Credentials for accessing SCM-Manager"
                  scope: GLOBAL

      # TODO could we use the SCMM source here?
      # These URLS could be helpful:
      # http://localhost:9090/job/petclinic-plain/config.xml
      # http://localhost:9090//plugin/job-dsl/api-viewer/index.html#path/multibranchPipelineJob-branchSources
      # For now using "scm-manager" in JobDSL leads to an error when CASC is applied: 
      # "No such property: scm for class: javaposse.jobdsl.plugin.structs.DescribableListContext"
      # This is probably because "scm-manager" is invalid groovy syntax.
      # See https://github.com/jenkinsci/scm-manager-plugin/blob/1.4.0/src/main/java/com/cloudogu/scmmanager/scm/ScmManagerSource.java
      # This might be fixed in a later SCMM Plugin for Jenkins
      init-job: |
        jenkins:
          systemMessage: "Seeding init jobs"
        jobs:
          - script: |
              multibranchPipelineJob('fluxV1-petclinic-plain') {
                branchSources {
                  git {
                    id('fluxV1-petclinic-plain')
                    remote('http://scmm-scm-manager:9091/scm/repo/application/petclinic-plain')
                    credentialsId('scmm-user')
                  }
                }
              }

          - script: |
              multibranchPipelineJob('nginx') {
                  branchSources {
                      git {
                          id('nginx')
                          remote('http://scmm-scm-manager:9091/scm/repo/application/nginx')
                          credentialsId('scmm-user')
                      }
                  }
              }
          - script: |
              multibranchPipelineJob('fluxv2-petclinic-plain') {
                  branchSources {
                      git {
                          id('fluxv2-petclinic-plain')
                          remote('http://scmm-scm-manager:9091/scm/repo/fluxv2/petclinic-plain')
                          credentialsId('scmm-user')
                      }
                  }
              }
          - script: |
              multibranchPipelineJob('argocd-petclinic-plain') {
                  branchSources {
                      git {
                          id('argocd-petclinic-plain')
                          remote('http://scmm-scm-manager:9091/scm/repo/argocd/petclinic-plain')
                          credentialsId('scmm-user')
                      }
                  }
              }

  sidecars:
    configAutoReload:
      enabled: false

  admin:
    # Use reproducible admin password from secret. Change there, if necessary.
    existingSecret: jenkins-credentials

  containerEnv:
    - name: SECRETS
      # The files in this folders can be used as ${variable} in CasC credentials
      # Default /run/secrets results in "read-only file system"
      value: /secrets/jenkins

persistence:
  volumes:
    - name: scmm-user
      secret:
        # TODO use SCMM user secret here
        secretName: jenkins-scmm

  mounts:
    - name: scmm-user
      # Use k8s secret as jenkins credentials.
      # https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#kubernetes-secrets
      mountPath: /secrets/jenkins
      readOnly: true

agent:
  #enabled: true
  # We need JDK11 for our PetClinic example
  tag: "4.6-1-jdk11"
  # TODO? move to /tmp?
  workingDir: "/var/jenkins_home/"
  customJenkinsLabels: [ 'docker' ]
  # Controls how agent pods are retained after the Jenkins build completes
  # Possible values: Always, Never, OnFailure
  # Persist for faster builds (workspace is not deleted)
  podRetention: "Always" # TODO This results in "Never". Bug in chart?
  volumes:
    - type: HostPath
      # In our local playground infrastructure, we're using a workaround: Builds are run on the Jenkins master, which runs
      # inside a container. During the builds, more containers are started (on the same docker host).
      # This leads to a scenario where the Jenkins container tries to mount its filesystem into another container.
      # The docker host is only able to realize this mounts when the mounted paths are the same inside and outside the containers.
      # As another workaround, we provide the path inside the container also outside the container (/var/jenkins_home/workspace)
      # In order not to pollute the host, we symlink /var/jenkins_home/workspace into this repo.
      hostPath: /var/jenkins_home/workspace
      mountPath: /var/jenkins_home/workspace
    - type: HostPath
      # For this demo, allow jenkins master to access docker client
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock
    - type: HostPath
     # TODO this might cause problems on some host: Risk of missing libraries because docker might be linked dynamically and libraries might be missing in container
      hostPath: /usr/bin/docker
      mountPath: /usr/bin/docker
  containerCap: 2

