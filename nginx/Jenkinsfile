#!groovy

// "Constants"
String getApplication() { "nginx" }

String getCesBuildLibVersion() { '1.44.3' }

String getCesBuildLibRepo() { 'https://github.com/cloudogu/ces-build-lib/' }

String getScmManagerCredentials() { 'scmm-user' }

String getGitVersion() { '2.24.3' }

String getKubectlImage() { 'lachlanevenson/k8s-kubectl:v1.18.2' }

String getConfigRepositoryUrl() { "http://scmm-scm-manager:9091/scm/repo/cluster/gitops" }

String getConfigRepositoryPRUrl() { 'http://scmm-scm-manager:9091/scm/api/v2/pull-requests/cluster/gitops' }

String getHelmChartRepository() { "https://charts.bitnami.com/bitnami" }

String getHelmChartName() { "nginx" }

String getHelmChartVersion() { "8.0.0" }

String getMainBranch() { 'main' }

node('docker') {
    cesBuildLib = library(identifier: "ces-build-lib@${cesBuildLibVersion}",
            retriever: modernSCM([$class: 'GitSCMSource', remote: cesBuildLibRepo])
    ).com.cloudogu.ces.cesbuildlib

    properties([
            // Keep only the last 10 build to preserve space
            disableConcurrentBuilds()
    ])

    def git = cesBuildLib.Git.new(this)

    // we can put our script inline, instead of having to load it through a configmap
    helmValuesFromFile = [
            [key  : "index",
             file : "../index.html",
             stage: ["staging", "production"]
            ]
    ]

    fileConfigmaps = [
            [name : "index",
             file : "../index.html",
             stage: ["staging", "production"]
            ]
    ]

    timeout(activity: true, time: 30, unit: 'MINUTES') {
        catchError {
            stage('Checkout') {
                checkout scm
                git.clean('')
            }
            // Saves info about application git repo (as opposed to gitOps repo) before changing paths later in the pipeline
            def applicationRepo = GitRepo.create(git)

            stage('Deploy') {
                if (isDeployableBuild()) {
                    String pushedChanges = pushToConfigRepo(applicationRepo)
                    setBuildDescription createBuildDescription(pushedChanges)
                } else {
                    setBuildDescription 'No push to gitOps repo, because neither on develop branch nor "forceDeployStaging" param set'
                }
            }
        }
    }
}

private isDeployableBuild() {
    return env.BRANCH_NAME in [mainBranch]
}

String pushToConfigRepo(GitRepo applicationRepo) {
    def git = cesBuildLib.Git.new(this, scmManagerCredentials)
    def changesOnGitOpsRepo = ''

    git.committerName = 'Jenkins'
    git.committerEmail = 'jenkins@cloudogu.com'

    def configRepoTempDir = '.configRepoTempDir'

    try {
        dir(configRepoTempDir) {
            git url: configRepositoryUrl, branch: mainBranch, changelog: false, poll: false
            git.fetch()

            def repoChanges = new HashSet<String>()
            repoChanges += createApplicationForStageAndPushToBranch 'staging', mainBranch, applicationRepo, git

            git.checkoutOrCreate(application)
            repoChanges += createApplicationForStageAndPushToBranch 'production', application, applicationRepo, git

            changesOnGitOpsRepo = aggregateChangesOnGitOpsRepo(repoChanges)

            if (changesOnGitOpsRepo) {
                createPullRequest()
            }
        }
    } finally {
        sh "rm -rf ${configRepoTempDir}"
    }

    return changesOnGitOpsRepo
}

private setBuildDescription(String description) {
    echo "Setting build description: ${description}"
    currentBuild.description = description
}

private String createBuildDescription(String pushedChanges) {
    String description = ''

    description += "${description ? '\n' : ''}GitOps commits: "

    if (pushedChanges) {
        description += pushedChanges
    } else {
        description += 'No changes'
    }

    return description
}

private String aggregateChangesOnGitOpsRepo(changes) {
    // Remove empty
    (changes - '')
    // and concat into string
            .join('; ')
}

String createApplicationForStageAndPushToBranch(String stage, String branch, GitRepo applicationRepo, def git) {
    String commitPrefix = stage == 'staging' ? '[S] ' : ''

    sh "mkdir -p ${stage}/${application}"
    // copy extra resources like sealed secrets
    echo "Copying extra resources from application repo to gitOps Repo: 'k8s/${stage}/*' to '${stage}/${application}'"
    sh "cp ${env.WORKSPACE}/k8s/${stage}/*.yaml ${stage}/${application}/ || true"

    writeFile file: "${stage}/${application}/helmRelease.yaml", text: createHelmRelease("${stage}", createFromFileValues(stage))
    writeFile file: "${stage}/${application}/valuesMap.yaml", text: createConfigMap("values.yaml", "${env.WORKSPACE}/k8s/values-${stage}.yaml", "${application}-helm-operator-values", "${stage}")
    writeFile file: "${stage}/${application}/sharedValuesMap.yaml", text: createConfigMap("values.yaml", "${env.WORKSPACE}/k8s/values-shared.yaml", "${application}-shared-helm-operator-values", "${stage}")
    echo "after write"

    git.add('.')
    if (git.areChangesStagedForCommit()) {
        git.commit(commitPrefix + createApplicationCommitMessage(git, applicationRepo), applicationRepo.authorName, applicationRepo.authorEmail)
        git.pushAndPullOnFailure("origin ${branch}")
        return "${stage} (${git.commitHashShort})"
    } else {
        echo "No changes on gitOps repo for ${stage} (branch: ${branch}). Not committing or pushing."
        return ''
    }
}

void createPullRequest() {
    withCredentials([usernamePassword(credentialsId: scmManagerCredentials, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USER')]) {
        echo 'creating pull request'
        String script =
                'curl -s -o /dev/null -w "%{http_code}" ' +
                        "-u ${GIT_USER}:${GIT_PASSWORD} " +
                        '-H "Content-Type: application/vnd.scmm-pullRequest+json;v=2" ' +
                        '--data \'{"title": "created by service ' + application + '", "source": "' + application + '", "target": "' + mainBranch + '"}\' ' +
                        configRepositoryPRUrl

        // For debugging the quotation of the shell script, just do: echo script
        String http_code = sh returnStdout: true, script: script

        // At this point we could write a mail to the last committer that his commit triggered a new or updated GitOps PR

        echo "http_code: ${http_code}"
        // PR exists if we get 409
        if (http_code != "201" && http_code != "409") {
            unstable 'Could not create pull request'
        }
    }
}

String createHelmRelease(String namespace, String extraValues) {
    return """apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: ${application}
  namespace: ${namespace}
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: ${application}
  chart:
    repository: ${helmChartRepository}
    name: ${helmChartName}
    version: ${helmChartVersion}
  valuesFrom:
  - configMapKeyRef:
      name: ${application}-shared-helm-operator-values
      namespace: ${namespace}
      key: values.yaml
      optional: false
  - configMapKeyRef:
      name: ${application}-helm-operator-values
      namespace: ${namespace}
      key: values.yaml
      optional: false
  values:
""" + extraValues
}

String createFromFileValues(String stage) {
    String values = ""

    helmValuesFromFile.each {
        if (stage in it['stage']) {
            values = fileToInlineYaml(it['key'], "${env.WORKSPACE}/k8s/${it['file']}")
        }
    }
    return values
}

String createConfigMap(String key, String filePath, String name, String namespace) {
    String configMap = ""
    withKubectl {
        String script = "KUBECONFIG=${writeKubeConfig()} kubectl create configmap ${name} " +
                "--from-file=${key}=${filePath} " +
                "--dry-run=client -o yaml -n ${namespace}"

        configMap = sh returnStdout: true, script: script
    }
    return configMap
}

// Dummy kubeConfig, so we can use `kubectl --dry-run=client`
String writeKubeConfig() {
    String kubeConfigPath = "${pwd()}/.kube/config"
    echo "Writing $kubeConfigPath"
    writeFile file: kubeConfigPath, text: """apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://localhost
  name: self-hosted-cluster
contexts:
- context:
    cluster: self-hosted-cluster
    user: svcs-acct-dply
  name: svcs-acct-context
current-context: svcs-acct-context
kind: Config
preferences: {}
users:
- name: svcs-acct-dply
  user:
    token: DATA+OMITTED"""

    return kubeConfigPath
}

void withKubectl(Closure body) {
    cesBuildLib.Docker.new(this).image(kubectlImage)
    // Allow accessing WORKSPACE even when we are in a child dir (using "dir() {}")
            .inside("${pwd().equals(env.WORKSPACE) ? '' : "-v ${env.WORKSPACE}:${env.WORKSPACE}"}") {
                body()
            }
}

String fileToInlineYaml(String key, String filePath) {
    String values = ""
    String indent = "        "

    def fileContent = readFile filePath
    values += "\n    ${key}: |\n${indent}"
    values += fileContent.split("\\n").join("\n" + indent)

    return values
}

/**
 * Reflect build parameters in commit message used for GitOps.
 * This is meant to bring more transparency into GitOps repo.
 */
String createApplicationCommitMessage(def git, def applicationRepo) {
    String issueIds = (applicationRepo.commitMessage =~ /#\d*/).collect { "${it} " }.join('')

    String[] urlSplit = applicationRepo.repositoryUrl.split('/')
    def repoNamespace = urlSplit[-2]
    def repoName = urlSplit[-1]
    String message = "${issueIds}${repoNamespace}/${repoName}@${applicationRepo.commitHash}"
    List additions = []

    if (!additions.isEmpty()) {
        // Highlight commits that ran with non-default parameters
        message = "* ${message}\n\n${additions.join('\n')}"
    }

    return message
}

class GitRepo {

    static GitRepo create(git) {
        // Constructors can't be used in Jenkins pipelines due to CPS
        // https://www.jenkins.io/doc/book/pipeline/cps-method-mismatches/#constructors
        return new GitRepo(git.commitAuthorName, git.commitAuthorEmail, git.commitHashShort, git.commitMessage, git.repositoryUrl)
    }

    GitRepo(String authorName, String authorEmail, String commitHash, String commitMessage, String repositoryUrl) {
        this.authorName = authorName
        this.authorEmail = authorEmail
        this.commitHash = commitHash
        this.commitMessage = commitMessage
        this.repositoryUrl = repositoryUrl
    }

    final String authorName
    final String authorEmail
    final String commitHash
    final String commitMessage
    final String repositoryUrl
}

def cesBuildLib