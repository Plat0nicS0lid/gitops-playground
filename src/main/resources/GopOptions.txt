
    // args group registry
//    @CommandLine.Option(names = ['--registry-url'], description = 'The url of your external registry')
    private String registryUrl

//    @CommandLine.Option(names = ['--registry-path'], description = 'Optional when --registry-url is set')
    private String registryPath

//    @CommandLine.Option(names = ['--registry-username'], description = 'Optional when --registry-url is set')
    private String registryUsername

//    @CommandLine.Option(names = ['--registry-password'], description = 'Optional when --registry-url is set')
    private String registryPassword

//    @CommandLine.Option(names = ['--internal-registry-port'], description = 'Port of registry registry. Ignored when registry-url is set')
    private int internalRegistryPort




    // args group jenkins
//    @CommandLine.Option(names = ['--jenkins-url'], description = 'The url of your external jenkins')
    private String jenkinsUrl

//    @CommandLine.Option(names = ['--jenkins-username'], description = 'Mandatory when --jenkins-url is set')
    private String jenkinsUsername

//    @CommandLine.Option(names = ['--jenkins-password'], description = 'Mandatory when --jenkins-url is set')
    private String jenkinsPassword




    // args group scm
//    @CommandLine.Option(names = ['--scmm-url'], description = 'The host of your external scm-manager')
    private String scmmUrl

//    @CommandLine.Option(names = ['--scmm-username'], description = 'Mandatory when --scmm-url is set')
    private String scmmUsername

//    @CommandLine.Option(names = ['scmm-password'], description = 'Mandatory when --scmm-url is set')
    private String scmmPassword









    // args group tool configuration
//    @CommandLine.Option(names = ['--kubectl-image'], description = 'Sets image for kubectl')
    private String kubectlImage
//    @CommandLine.Option(names = ['--helm-image'], description = 'Sets image for helm')
    private String helmImage
//    @CommandLine.Option(names = ['--kubeval-image'], description = 'Sets image for kubeval')
    private String kubevalImage
//    @CommandLine.Option(names = ['--helmkubeval-image'], description = 'Sets image for helmkubeval')
    private String helmKubevalImage
//    @CommandLine.Option(names = ['--yamllint-image'], description = 'Sets image for yamllint')
    private String yamllintImage
//    @CommandLine.Option(names = ['--skip-helm-update'], description = 'Skips adding and updating helm repos')
    private boolean skipHelmUpdate
//    @CommandLine.Option(names = ['--argocd-config-only'], description = 'Skips installing argo-cd. Applies ConfigMap and Application manifests to bootstrap existing argo-cd')
    private boolean argocdConfigOnly




    // args group metrics
//    @CommandLine.Option(names = ['--metrics'], description = 'Installs the Kube-Prometheus-Stack for ArgoCD. This includes Prometheus, the Prometheus operator, Grafana and some extra resources')
    private boolean metrics














    // args group operator
//    @CommandLine.Option(names = ['--fluxv1'], description = 'Install the Flux V1 module')
    private boolean fluxv1

//    @CommandLine.Option(names = ['--fluxv2'], description = 'Install the Flux V2 module')
    private boolean fluxv2

//    @CommandLine.Option(names = ['--argocd'], description = 'Install the ArgoCD module')
    private boolean argocd

//    @CommandLine.Option(names = ['--argocd-url'], description = 'The URL where argocd is accessible. It has to be the full URL with http:// or https://')
    private String argocdUrl
}
